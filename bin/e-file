#!/usr/bin/env python

import requests
import argparse
import sys
import json
import portage

# dev-python/termcolor
from termcolor import colored

VERSION='3.1'
BASEURL='https://portagefilelist.de/site/query/robotFile?file=%s'

parser = argparse.ArgumentParser(description='This script searches on\
https://portagefilelist.de for the given file and displays the result\
with further informations from local portage', prog='e-file')

parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + VERSION)
parser.add_argument('file', help='file to search for')
args = parser.parse_args()

try:
    r = requests.get(BASEURL % args.file)
    if r == None:
            raise Exception('Unknown error')
    elif r.status_code != 200:
            raise Exception('Got response (%d): %s' % (r.status_code, r.text))
except Exception as e:
    sys.stderr.write('Error searching file: %s\n' % e)

files = json.loads(r.text)
if len(files['result']) > 0:
    cps = {}
    for file in files['result']:
        category = file['category']
        package = file['package']
        version = file['version']
        filepath = '%s/%s' % (file['path'], file['file'])

        if not category in cps:
            cps[category] = {}

        if not package in cps[category]:
            cps[category][package] = {
                    'versions': [version],
                    'files': [filepath]
                    }
        else:
            cps[category][package]['versions'].append(version)
            cps[category][package]['files'].append(filepath)

    for category, packages in cps.items():
        for package, vf in packages.items():
            vardbapi = portage.db['/']['vartree'].dbapi
            print(vardbapi.cp_list('app-shells/bash'))

            # *  category/package
            #[I] category/package
            installed = False
            if installed:
                sys.stdout.write(colored('[I] ', 'green'))
            else:
                sys.stdout.write(colored(' *  ', 'green'))
            sys.stdout.write('%s/%s\n' % (category, package))

            #        Available Versions:     X.Y A.B
            versions = sorted(set(vf['versions']))
            sys.stdout.write(colored('        Available Versions:     %s\n' % ' '.join(versions), 'green'))

            #        Last Installed Ver:     X.Y(Thu Apr 2 01:01:19 2020)
            if installed:
                sys.stdout.write(colored('        Last Installed Ver:     ', 'green'))
                sys.stdout.write(colored('X.Y', 'grey', 'on_blue'))
                sys.stdout.write(colored('(Thu Apr 2 01:01:19 2020)\n', 'magenta'))

            #        Homepage:               http://example.org
            sys.stdout.write(colored('        Homepage:               ', 'green'))
            sys.stdout.write('http://example.org\n')

            #        Description:            package description
            sys.stdout.write(colored('        Description:            ', 'green'))
            sys.stdout.write('description from portage\n')

            #        Matched Files:          /the/found/file; XXX multiple files?
            files = sorted(set(vf['files']))
            sys.stdout.write(colored('        Matched Files:          ', 'green'))
            sys.stdout.write('%s\n' % '; '.join(files))

            print('')

else:
    print('No matches found.')
    sys.exit(1)
